package RedesZone;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.LinkedList;
import java.awt.*;
import java.awt.event.*;



public class InsertarUsuario extends JFrame {
	
	 // Declaracion de las variables
    private javax.swing.JButton jButtonAnadir;
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonGuardar;
    private javax.swing.JButton jButtonLimpiar;
    private javax.swing.JLabel jLabelNombre;
    private javax.swing.JLabel jLabelPasswoed;
    private javax.swing.JLabel jLabelTitulo;
    private javax.swing.JLabel jLabelUsuario;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextFieldNombre;
    private javax.swing.JTextField jTextFieldPassword;
    private javax.swing.JTextField jTextFieldUsuario;
    private javax.swing.JTextPane jTextPaneVer;
    private File fichero; // Ruta del fichero a modificar
    private JFrame ventanaPadre; // Ventana anterior de trabajo
    private LinkedList contraseñasGuardar = new LinkedList();// Contraseñas a guardar en el archivo

  
    public InsertarUsuario(JFrame jF, File f) {
        this.ventanaPadre = jF;
        this.fichero = f;
        this.ventanaPadre.setVisible(false);
        initComponents();
        this.setVisible(true);
    }
    private void initComponents() {

        jLabelTitulo = new JLabel();
        jLabelNombre = new JLabel();
        jLabelUsuario = new JLabel();
        jLabelPasswoed = new JLabel();
        jTextFieldNombre = new JTextField();
        jTextFieldUsuario = new JTextField();
        jTextFieldPassword = new JTextField();
        jButtonAnadir = new JButton();
        jButtonLimpiar = new JButton();
        jButtonGuardar = new JButton();
        jButtonCancelar = new JButton();
        jScrollPane2 = new JScrollPane();
        jTextPaneVer = new JTextPane();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("Registro POO");
        setResizable(false);

        jLabelTitulo.setFont(new Font("Tahoma", 1, 24)); 
        jLabelTitulo.setText("REGISTRO");

        jLabelNombre.setText("Nombre");

        jLabelUsuario.setText("Usuario");

        jLabelPasswoed.setText("Contraseña");

        jButtonAnadir.setFont(new Font("Tahoma", 0, 14)); 
        jButtonAnadir.setText("Añadir");
        jButtonAnadir.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonAnadirActionPerformed(evt);
            }
        });

        jButtonLimpiar.setFont(new Font("Tahoma", 0, 14)); 
        jButtonLimpiar.setText("Limpiar");
        jButtonLimpiar.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonLimpiarActionPerformed(evt);
            }
        });

        jButtonGuardar.setFont(new Font("Tahoma", 0, 14)); 
        jButtonGuardar.setText("Guardar");
        jButtonGuardar.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonGuardarActionPerformed(evt);
            }
        });

        jButtonCancelar.setFont(new Font("Tahoma", 0, 14)); 
        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        jTextPaneVer.setEditable(false);
        jScrollPane2.setViewportView(jTextPaneVer);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelNombre)
                            .addComponent(jLabelUsuario)
                            .addComponent(jLabelPasswoed))
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonAnadir)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                                .addComponent(jButtonLimpiar))
                            .addComponent(jTextFieldNombre)
                            .addComponent(jTextFieldUsuario)
                            .addComponent(jTextFieldPassword)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                            .addGroup(GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jButtonCancelar)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonGuardar))
                            .addComponent(jScrollPane2,GroupLayout.Alignment.LEADING, GroupLayout.PREFERRED_SIZE, 365,GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(jLabelTitulo)))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabelTitulo)
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNombre)
                    .addComponent(jTextFieldNombre,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelUsuario)
                    .addComponent(jTextFieldUsuario,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPasswoed)
                    .addComponent(jTextFieldPassword,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonLimpiar)
                    .addComponent(jButtonAnadir))
                .addGap(36, 36, 36)
                .addComponent(jScrollPane2,GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCancelar)
                    .addComponent(jButtonGuardar))
                .addGap(25, 25, 25))
        );

        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-401)/2, (screenSize.height-521)/2, 401, 521);
    }

    private void jButtonCancelarActionPerformed(ActionEvent evt) {

        this.setVisible(false);
        ventanaPadre.setVisible(true);

    }
    private void jButtonLimpiarActionPerformed(ActionEvent evt) {

        // Limpiamos todos los campos
    	
        jTextFieldNombre.setText("");
        jTextFieldUsuario.setText("");
        jTextFieldPassword.setText("");

    }

    private void jButtonAnadirActionPerformed(ActionEvent evt) {

        String nuevoItem; // String con nombre, usuario y contraseña que queremos guardar

        // Si algun campo está vacio, mostramos un mensaje informando de que faltan datos
        
        if (jTextFieldNombre.getText().equals("") || jTextFieldUsuario.getText().equals("") || jTextFieldPassword.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "ERROR: Faltan datos por rellenar", "Mensaje de Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        nuevoItem = jTextFieldNombre.getText() + " " + jTextFieldUsuario.getText() + " " + jTextFieldPassword.getText() + " \n";
        contraseñasGuardar.add(nuevoItem);
        jTextPaneVer.setText(jTextPaneVer.getText() + nuevoItem);
    }

    private void jButtonGuardarActionPerformed(ActionEvent evt) {

        BufferedWriter writer; //Para escribir en el fichero

        if (fichero == null) {
            //Activamos el filtro para que nos muestre, por defecto, los archivos de texto
        	
            FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos de texto", "txt");
            JFileChooser fileChooserGuardar = new JFileChooser();
            fileChooserGuardar.setFileFilter(filtro);
            fileChooserGuardar.setDialogTitle("Guardar");
            int seleccion = fileChooserGuardar.showSaveDialog(this);

            if (seleccion == JFileChooser.APPROVE_OPTION) {
                fichero = fileChooserGuardar.getSelectedFile();
                fileChooserGuardar.setFileSelectionMode(JFileChooser.FILES_ONLY);
               
                try {
                    writer = new BufferedWriter(new FileWriter(fichero + ".txt")); // Ponemos .txt para darle extension al archivo que creamos
                    while (!contraseñasGuardar.isEmpty()) {
                        writer.write(contraseñasGuardar.poll().toString());
                        writer.newLine();
                    }
                    writer.flush();
                    writer.close();
                } catch (IOException e) {
                   
                	JOptionPane.showMessageDialog(this, "Error al guardar el archivo", "Error guardar archivo", JOptionPane.ERROR_MESSAGE);
                }

                JOptionPane.showMessageDialog(this, "El fichero de texto se ha guardado correctamente con los datos introducidos ;)");
            }
        } else if (!(fichero == null)) // Añadimos al fichero existente
        {
            try {
                writer = new BufferedWriter(new FileWriter(fichero, true));
                while (!contraseñasGuardar.isEmpty()) {
                    writer.write(contraseñasGuardar.poll().toString());
                    writer.newLine();
                }
                writer.flush();
                writer.close();
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al guardar el archivo", "Error guardar archivo", JOptionPane.ERROR_MESSAGE);
            }
            JOptionPane.showMessageDialog(this, "El fichero de texto se ha guardado correctamente con los datos introducidos ;)");
        } else {
            JOptionPane.showMessageDialog(this, "ERROR: Error al guardar", "Mensaje de Error", JOptionPane.ERROR_MESSAGE);
        }

        // Volvemos al menu principal
        this.setVisible(false);
        ventanaPadre.setVisible(true);
    }
   
   
}
